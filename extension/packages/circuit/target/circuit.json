{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":17365152408757463552,"abi":{"parameters":[{"name":"index","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"leaf","type":{"kind":"field"},"visibility":"private"},{"name":"root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"},{"name":"merkle_path","type":{"kind":"array","length":6,"type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"caller","type":{"kind":"field"},"visibility":"private"},{"name":"nullifier_hash","type":{"kind":"field"},"visibility":"public"}],"return_type":null,"error_types":{}},"bytecode":"","debug_symbols":"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","file_map":{"22":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"25":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::hash::poseidon::bn254::consts;\nuse crate::hash::poseidon::permute;\nuse crate::hash::poseidon::PoseidonConfig;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(\n        consts::x5_2_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(\n        consts::x5_3_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(\n        consts::x5_4_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(\n        consts::x5_5_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(\n        consts::x5_6_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(\n        consts::x5_7_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(\n        consts::x5_8_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(\n        consts::x5_9_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(\n        consts::x5_10_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(\n        consts::x5_11_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(\n        consts::x5_12_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(\n        consts::x5_13_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(\n        consts::x5_14_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(\n        consts::x5_15_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(\n        consts::x5_16_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(\n        consts::x5_17_config(),\n        state);\n\n    state\n}\n","path":"std/hash/poseidon/bn254/perm.nr"},"26":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\nmod perm;\nmod consts;\n\nuse crate::hash::poseidon::{PoseidonConfig, absorb};\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of §3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\n#[no_predicates]\npub fn sponge<N>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"std/hash/poseidon/bn254.nr"},"27":{"source":"mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse crate::field::modulus_num_bits;\nuse crate::hash::Hasher;\nuse crate::default::Default;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\nstruct PoseidonConfig<T, N, X> { \n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n     // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<T, N, X>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X]\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N);\n    assert_eq(t, T);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<T, N, X>(pos_conf: PoseidonConfig<T, N, X>, mut state: [Field; T]) -> [Field; T] {\n    let PoseidonConfig {t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } = pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        crate::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf/2 + 1) as u32 * T + _r as u32];\n        crate::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    crate::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf/2+1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<N>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<T, N, X, O>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O] // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i+1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<O>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\n// Check security of sponge instantiation\nfn check_security(rate: Field, width: Field, security: Field) -> bool {\n    let n = modulus_num_bits();\n\n    ((n - 1) as Field * (width - rate) / 2) as u8 > security as u8\n}\n\nstruct PoseidonHasher{\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        } \n        if len == 2 {\n            result = bn254::hash_2([self._state[0],self._state[1]]);\n        } \n        if len == 3 {\n            result = bn254::hash_3([self._state[0],self._state[1],self._state[2]]);\n        } \n        if len == 4 {\n            result = bn254::hash_4([self._state[0],self._state[1],self._state[2],self._state[3]]);\n        } \n        if len == 5 {\n            result = bn254::hash_5([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4]]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5]]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6]]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7]]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8]]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9]]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10]]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11]]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12]]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13]]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([self._state[0],self._state[1],self._state[2],self._state[3],self._state[4], self._state[5], self._state[6], self._state[7], self._state[8], self._state[9], self._state[10], self._state[11], self._state[12], self._state[13], self._state[14]]);\n        }\n        \n        result\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher{\n    fn default() -> Self{\n        PoseidonHasher{\n            _state: &[],\n        }\n    }\n}\n\nmod poseidon_tests {\n    use crate::hash::poseidon;\n\n    #[test]\n    fn reference_impl_test_vectors() {\n        // hardcoded test vectors from https://extgit.iaik.tugraz.at/krypto/hadeshash/-/blob/master/code/test_vectors.txt\n        {\n            let mut state = [0, 1, 2];\n            let mut expected = [\n                0x115cc0f5e7d690413df64c6b9662e9cf2a3617f2743245519e19607a4417189a, 0x0fca49b798923ab0239de1c9e7a4a9a2210312b6a2f616d18b5a87f9b628ae29, 0x0e7ae82e40091e63cbd4f16a6d16310b3729d4b6e138fcf54110e2867045a30c\n            ];\n            assert_eq(expected, poseidon::bn254::perm::x5_3(state), \"Failed to reproduce output for [0, 1, 2]\");\n        }\n        {\n            let mut state = [0, 1, 2, 3, 4];\n            let mut expected = [\n                0x299c867db6c1fdd79dcefa40e4510b9837e60ebb1ce0663dbaa525df65250465, 0x1148aaef609aa338b27dafd89bb98862d8bb2b429aceac47d86206154ffe053d, 0x24febb87fed7462e23f6665ff9a0111f4044c38ee1672c1ac6b0637d34f24907, 0x0eb08f6d809668a981c186beaf6110060707059576406b248e5d9cf6e78b3d3e, 0x07748bc6877c9b82c8b98666ee9d0626ec7f5be4205f79ee8528ef1c4a376fc7\n            ];\n            assert_eq(\n                expected, poseidon::bn254::perm::x5_5(state), \"Failed to reproduce output for [0, 1, 2, 3, 4]\"\n            );\n        }\n    }\n}\n","path":"std/hash/poseidon.nr"},"47":{"source":"use dep::std::hash::poseidon;\nuse dep::std::hash::keccak256;\n\nfn main(\n    index: Field,\n    secret: Field,\n    leaf: Field,\n    root: pub [u8; 32],\n    merkle_path: [[u8; 32]; 6],\n    caller: Field,\n    nullifier_hash: pub Field\n) {\n    assert(index as u16 < 64);\n    assert(poseidon::bn254::hash_1([secret]) == leaf);\n    check_nullifier(index, secret, caller, leaf, nullifier_hash);\n    check_root(index, leaf, root, merkle_path);\n}\n\nfn check_nullifier(\n    index: Field,\n    secret: Field,\n    caller: Field,\n    leaf: Field,\n    nullifier_hash: Field\n) {\n    assert(poseidon::bn254::hash_4([index, secret, caller, leaf]) == nullifier_hash);\n}\n\nfn check_root(index: Field, leaf: Field, root: [u8; 32], merkle_path: [[u8; 32]; 6]) {\n    let mut temp: u8 = index as u8;\n    let mut hash: [u8; 32] = leaf.to_be_bytes(32).as_array();\n    for i in 0..6 {\n        if (temp % 2 == 0) {\n            hash = get_hash(hash, merkle_path[i]);\n        } else {\n            hash = get_hash(merkle_path[i], hash);\n        };\n        temp /= 2;\n    }\n\n    assert(hash == root);\n}\n\nfn get_hash(left: [u8; 32], right: [u8; 32]) -> [u8; 32] {\n    let mut temp: [u8; 64] = [0; 64];\n    for i in 0..32 {\n        temp[i] = left[i];\n        temp[i + 32] = right[i];\n    }\n    keccak256(temp, 64)\n}\n\n#[test]\nfn test_main() {\n    let index = 240;\n    let secret: Field = 0x41d99200f93fd0a7aab103525e410af990d81ee93cd4449dbb3a2ad5f9f28d6d;\n    let leaf: Field = 0x1cf9203a7fa984f3ef6a0cde7648c1fa34882465137fa50ee7601215a87f1bc6;\n    let root: [u8; 32] = [\n        8,  38,  61, 214, 139, 170, 203, 218,\n        53, 227, 230,  92, 194,  96, 126,  65,\n        70,  10,  37, 175, 122,  15,  30, 183,\n        93, 237,  97,  13, 144, 248, 242,  23\n    ];\n    let merkle_path: [[u8; 32]; 6] = [\n        [\n            38, 143, 233, 103,   7, 242,  55, 120,\n            107,  81,  57,  70, 188, 234,  70,  39,\n            2, 139, 227,  29,  15,  41, 209, 184,\n            253, 225, 178, 106, 107, 154, 180,  91\n        ],\n        [\n            15,  11,  47, 180, 149, 219, 234, 25,\n            126,  77, 123, 140, 154,  92,  47, 64,\n            126,  94, 165, 209, 130,  91, 235, 81,\n            120, 129,  20, 196, 228,  44, 242, 56\n        ],\n        [\n            160,  79, 126, 203,  84, 143, 222,   3,\n            23,  99, 128,   6,  66, 196,  65,  12,\n            252, 147, 189,  13, 144, 210,  23, 152,\n            190, 188,  64,   3,  35,  80, 158,  71\n        ],\n        [\n            144, 116,  85, 175,   7, 162,  22, 230,\n            22, 206,  27, 142,  80,  48,  22,  60,\n            96,   9, 246, 141, 164,  50, 158, 113,\n            161, 169, 241, 149,  49,  49,  72, 107\n        ],\n        [\n            136, 225,  77,  19, 205, 132,  86,\n            64, 105, 192,  95, 205, 142, 241,\n            252, 143, 106, 197, 116,  74, 235,\n            21, 116,  71, 156, 152, 168, 213,\n            141,  89, 112, 149\n        ],\n        [\n            169, 144, 184,  68,  11,  66, 156,  46,\n            113,  61,  15, 208, 100, 238,  66,  56,\n            240, 243, 106,  39,  63, 102, 114, 239,\n            215,  70, 143, 143, 195, 161,  79, 172\n        ]\n    ];\n    let caller: Field = 0x7fa9385be102ac3eac297483dd6233d62b3e1496;\n    let nullifier_hash: Field = 0x315c2771d3623bb8ab283a3f572e11c94a3f6f8d5b13ab7f2a63734f461a9f;\n    main(index, secret, leaf, root, merkle_path, caller, nullifier_hash);\n}\n\n#[test]\nfn test_check_nullifier() {\n    let index: Field = 42;\n    let secret: Field = 0xefe5f4563cacc338220de1ac6e026bce5b74698d856b51c93bc6e37111f70a92;\n    let caller: Field = 0x84fa9e01ac822074d9aac28c64ac7d97e50c4cb6;\n    let leaf: Field = 0x2091a2b7e491f6546bc2e577915426075e93c785838b6c5a62df65659bb02141;\n    let nullifier_hash: Field = 0x22ce551bf5a2cf3c4a6214f3e336759d7b3933fcbd8326b9d52e87c168198f89;\n    check_nullifier(index, secret, caller, leaf, nullifier_hash);\n}\n\n#[test]\nfn test_check_root() {\n    let index: Field = 137;\n    let leaf: Field = 0x0d0104533688f8832fc48a04ba9b624a1aa1f4e2d220c7c3abc03928a161c9d2;\n    let root: [u8; 32] = [\n        144,  37, 254,  76, 219,  44, 197,  88,\n        177, 196,  40, 144, 188, 215, 164, 181,\n        218, 253,   1,  11,   9, 244,  54, 215,\n        194,  91,  92,  35, 132,  80,  17,  84\n    ];\n\n    let merkle_path: [[u8; 32]; 6] = [\n        [\n            32,  20, 111,  65, 170, 164,  41, 207,\n            228, 179, 212, 104, 129,  74,  83, 158,\n            187,  65,  19,  61,   5, 217,  72, 235,\n            110, 228, 109, 242, 164, 217, 184, 238\n        ],\n        [\n            49, 206, 158,  15,  76,  66, 248,   5,\n            103,   0,  88, 118, 222, 151,  21,  99,\n            246, 182, 170, 101, 198,   8, 244,  36,\n            137, 177,  95,  62,  55, 150,  14, 245\n        ],\n        [\n            95, 117, 158, 222,  44,  43,   5, 247,\n            119,   5, 234, 114,  77, 114,  14,  44,\n            246,  62, 103, 139, 194,  81, 241, 206,\n            245, 112, 191,   8,  94, 195, 206,  35\n        ],\n        [\n            31,  78, 247, 239, 118, 183,  15, 221,\n            133,  93, 133,  23,  86, 178,  18,   9,\n            7, 121, 183,  27, 255, 142, 255,  47,\n            42, 140, 243, 229,  71, 140, 226, 202\n        ],\n        [\n            231, 237, 152, 139, 172,  45, 199, 133,\n            157, 166, 235, 135,  21,  42, 143, 190,\n            105,  24, 196,   8,  79,  63, 186, 251,\n            184,  68,   1, 109,  24, 142,  94,  58\n        ],\n        [\n            201,  69, 194,  53, 124,  93,   1, 224,\n            236, 193,  45, 175, 144, 105, 156, 235,\n            175, 209,  62, 147, 183, 190, 166,  12,\n            134, 126,   1,  66, 243, 254, 161, 250\n        ]\n    ];\n\n    check_root(index, leaf, root, merkle_path);\n}\n\n#[test]\nfn test_get_hash() {\n    let left: [u8; 32] =  [\n        190,  46,  97, 174,  64, 221, 168,  60,\n        104, 204, 147, 227,  15,  71, 118,  41,\n        240, 161,  17, 187, 170,   5, 182, 100,\n        247,  53,  45,   7, 244, 114, 139, 210\n    ];\n    let right: [u8; 32] = [\n        153, 232, 112, 153,  45, 241,  76,\n        102, 129, 248, 237, 104, 149, 208,\n        38,   2, 175, 130, 161, 210, 190,\n        244, 189,  92,  42,  18, 245, 198,\n        127, 149,  13, 210\n    ];\n    let hash: [u8; 32] = [\n        61, 200, 109, 247,   1, 237,  14, 250,\n        7, 217,  81,  49, 196, 161,  60, 155,\n        91, 235,   7,  77, 232, 207, 204, 107,\n        251, 144, 133,  74,  42, 161,   7, 148\n    ];\n\n    assert(get_hash(left, right) == hash);\n}\n","path":"/home/name/zkTree/circuit/src/main.nr"}},"names":["main"]}